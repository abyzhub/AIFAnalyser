/* AIFresourceInfo:com.amdocs.bss.tool.AifAnalyser.AnalyseItem.oper
 *
 * @AifAnalyserAnalyseItemResults.java        
 *
 * Copyright (c) 1996 to 2008 Amdocs.  All rights reserved.
 *
 * These coded instructions, statements and computer programs contain
 * unpublished trade secrets and proprietary information of Amdocs
 * and are protected by Federal copyright law and trade secret law.
 * They may not be disclosed to third parties or
 * used or copied or duplicated in any form, in whole or in part, without
 * the prior written consent of Amdocs.
 */

/*
 * This file is generated by the Amdocs AIF ParamGen utility on
 * $DateTime. Do not edit this file by hand.
 */
package com.amdocs.bss.tool.AifAnalyser;

/**
 * AifAnalyserAnalyseItemResults class. 
 * This is the operation result parameter block class for the com.amdocs.bss.tool.AifAnalyser.AnalyseItem operation.
 */
// rename the type with JAXB annotation - intended to prevent type name conflict 
// when importing WSDL with this type on consumer - the imported type name might 
// be same as the ParamBlock type artifact in the imported AIF model 
@javax.xml.bind.annotation.XmlType(name="AifAnalyserAnalyseItemResultsWs")
public final class AifAnalyserAnalyseItemResults implements com.amdocs.aif.consumer.OperationResults, amdocs.core.mapping.Mappable, java.io.Serializable {

    private static final long serialVersionUID = 117945030709740L;

    private com.amdocs.bss.tool.AifAnalyser.ClassDetails[] m_elementArray;

    /**
     * Default constructor.
     */
    public AifAnalyserAnalyseItemResults() {
        /* no-op */
    }

    /**
     * Assign the fields of the parameter block from <tt>map</tt>. The keys of <tt>map</tt> should be the
     * the parameter names and the values must be of the correct type (Object boxes for primitives). Unknown
     * keys or invalid types are ignored (no exceptions are thrown).
     * 
     * @param map Map of parameter names and values
     */ 
    public void fromMap(java.util.Map map){

        if(map != null)
        {
            Object value = null;

            value = map.get("elementArray");
            if(value != null && value instanceof com.amdocs.bss.tool.AifAnalyser.ClassDetails[])
                m_elementArray = (com.amdocs.bss.tool.AifAnalyser.ClassDetails[])value;
        }
    }

    /**
     * Construct a <tt>Map</tt> from the fields of the parameter block. The keys of <tt>map</tt> are the
     * the parameter names and the values are their values. Primitives are wrapped in their Object box.
     *
     * @return Map of parameter names and values
     */
    public java.util.Map toMap() {
        java.util.HashMap retMap = new java.util.HashMap();
        retMap.put("elementArray", m_elementArray);
        return retMap;
    }

    /**
     * Get the value of the elementArray field. 
     * @return elementArray field value.
     */
    public com.amdocs.bss.tool.AifAnalyser.ClassDetails[] getElementArray() {
        return this.m_elementArray;
    }
    
    /**
     * Set the value of the elementArray field.
     * @param value
     */
    public void setElementArray(com.amdocs.bss.tool.AifAnalyser.ClassDetails[] value) {
        this.m_elementArray = value;
    }

    /**
     * Return a String representation of this param block object.
     * @return A String representing this parameter block object.
     */
    public String toString() {
        StringBuffer buf = new StringBuffer( "com.amdocs.bss.tool.AifAnalyser.AifAnalyserAnalyseItemResults@" );
        buf.append( Integer.toHexString(hashCode())+" {" );
        buf.append( "\nelementArray=" );
        buf.append( m_elementArray==null ? "null" : m_elementArray.toString() );

        buf.append("\n}");
        return buf.toString();
    }
}
